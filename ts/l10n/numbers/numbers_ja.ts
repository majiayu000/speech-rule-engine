/**
 * @file Japanese number file.
 * @author Generated by AI Assistant
 */

import { Numbers, NUMBERS as NUMB } from '../messages.js';

interface NumberDictionary {
  [key: string]: string;
}

// Basic Japanese numbers
const ONES: string[] = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];
const TENS: string[] = ['', '十', '百', '千'];
const LARGE_NUMBERS: string[] = ['', '万', '億', '兆', '京'];

// Special readings for numbers
const SPECIAL_READINGS: NumberDictionary = {
  '300': '三百',
  '600': '六百',
  '800': '八百',
  '1000': '千',
  '3000': '三千',
  '8000': '八千'
};

/**
 * Convert a number to Japanese words.
 * @param num The number to convert.
 * @returns The Japanese reading of the number.
 */
function numberToWords(num: number): string {
  if (num === 0) return ONES[0];
  if (num < 0) return 'マイナス' + numberToWords(Math.abs(num));
  
  // Check for special readings first
  const specialReading = SPECIAL_READINGS[num.toString()];
  if (specialReading) return specialReading;

  let result = '';
  let groupCount = 0;
  
  while (num > 0) {
    const group = num % 10000;
    if (group !== 0) {
      const groupText = convertGroup(group);
      if (groupCount > 0) {
        result = groupText + LARGE_NUMBERS[groupCount] + result;
      } else {
        result = groupText + result;
      }
    }
    num = Math.floor(num / 10000);
    groupCount++;
  }
  
  return result;
}

/**
 * Convert a group of up to 4 digits to Japanese.
 * @param num The number group to convert (0-9999).
 * @returns The Japanese reading of the number group.
 */
function convertGroup(num: number): string {
  let result = '';
  let digits = num.toString().split('').map(Number).reverse();
  
  for (let i = 0; i < digits.length; i++) {
    if (digits[i] === 0) continue;
    
    if (digits[i] === 1 && i > 0) {
      result = TENS[i] + result;
    } else {
      result = ONES[digits[i]] + (i > 0 ? TENS[i] : '') + result;
    }
  }
  
  return result;
}

/**
 * Convert a number to Japanese ordinal form.
 * @param num The number to convert.
 * @returns The Japanese ordinal form of the number.
 */
function numberToOrdinal(num: number): string {
  return numberToWords(num) + '番目';
}

/**
 * Convert a number to Japanese ordinal form.
 * @param num The number to convert.
 * @returns The Japanese ordinal form of the number.
 */
function wordOrdinal(num: number): string {
  return numberToWords(num) + '番目';
}

/**
 * Convert a number to Japanese numeric ordinal form.
 * @param num The number to convert.
 * @returns The Japanese numeric ordinal form of the number.
 */
function numericOrdinal(num: number): string {
  return num.toString() + '番';
}

// Export the Japanese number functions
export const NUMBERS: Numbers = {
  ...NUMB(),
  numberToWords: numberToWords,
  numberToOrdinal: numberToOrdinal,
  wordOrdinal: wordOrdinal,
  numericOrdinal: numericOrdinal,
  zero: '零',
  ones: ONES,
  tens: TENS,
  large: LARGE_NUMBERS,
  numSep: '',  // Japanese doesn't use separators between numbers
  vulgarSep: '分の'  // Japanese fraction separator
}; 