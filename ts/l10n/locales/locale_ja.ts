/**
 * @file Japanese message file.
 * @author Generated by AI Assistant
 */

import { Grammar } from '../../rule_engine/grammar.js';
import { createLocale, Locale } from '../locale.js';
import { nestingToString } from '../locale_util.js';
import { NUMBERS } from '../numbers/numbers_ja.js';
import * as tr from '../transformers.js';
import * as SpeechRules from '../../speech_rules/speech_rules.js';

let locale: Locale = null;

/**
 * @returns The Japanese locale.
 */
export function ja(): Locale {
  if (!locale) {
    locale = create();
  }
  // Initialize grammar methods
  Grammar.getInstance().setCorrection('particle', locale.CORRECTIONS.particle);
  
  // Add Japanese specific speech rules
  SpeechRules.addStore('ja.speech.', '', {});
  SpeechRules.addStore('ja.summary.', 'ja.speech.mathspeak', {});
  
  return locale;
}

/**
 * @returns The Japanese locale.
 */
function create(): Locale {
  const loc = createLocale();
  loc.NUMBERS = NUMBERS;
  loc.FUNCTIONS.radicalNestDepth = nestingToString;
  
  // Initialize CORRECTIONS object
  loc.CORRECTIONS = {};
  
  // Japanese specific functions
  loc.FUNCTIONS.plural = function(unit: string) { return unit; }; // Japanese doesn't use plurals
  
  // Combine SI prefix with unit
  loc.FUNCTIONS.si = (prefix: string, unit: string) => {
    return prefix + unit;
  };

  // Combine root index with root
  loc.FUNCTIONS.combineRootIndex = function(index: string, postfix: string) {
    return index + postfix;
  };

  // Set default number transformer
  loc.ALPHABETS.combiner = tr.Combiners.prefixCombiner;
  loc.ALPHABETS.digitTrans.default = NUMBERS.numberToWords;

  // Japanese specific particle corrections
  loc.CORRECTIONS.particle = (name: string) => {
    // Handle Japanese particles (は、が、を、に、etc.)
    const particles: { [key: string]: string } = {
      'は': 'wa',
      'が': 'ga',
      'を': 'wo',
      'に': 'ni',
      'で': 'de',
      'へ': 'e',
      'と': 'to'
    };
    return particles[name] || name;
  };

  // Set Japanese specific SUBISO
  loc.SUBISO = {
    default: 'ja',
    all: ['ja'],
    current: 'ja'
  };

  // Messages specific to Japanese
  loc.MESSAGES = {
    MS: {
      START: '始め',
      END: '終わり',
      FRAC_V: '分数',
      FRAC_B: '分数',
      FRAC_S: '分の',
      NEST_FRAC: '入れ子の分数',
      ENDFRAC: '分数終わり',
      FRAC_OVER: '分の',
      ROOT: '根号',
      STARTROOT: '根号始め',
      ENDROOT: '根号終わり',
      ROOTINDEX: '指数',
      INDEX: '指数',
      NESTED: '入れ子の',
      NEST_ROOT: '入れ子の根号'
    },
    MSroots: {},
    font: {
      normal: '通常',
      bold: '太字',
      italic: '斜体',
      'bold-italic': '太字斜体'
    },
    embellish: {},
    role: {},
    enclose: {},
    navigate: {
      next: '次',
      previous: '前',
      up: '上',
      down: '下'
    },
    regexp: {
      text: 'テキスト',
      number: '数字'
    },
    unitTimes: '掛ける'
  };

  return loc;
} 